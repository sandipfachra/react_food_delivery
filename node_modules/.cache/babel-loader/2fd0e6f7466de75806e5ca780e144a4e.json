{"ast":null,"code":"var _jsxFileName = \"E:\\\\reactjs\\\\food_proj\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport classes from './AvailableMeals.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = props => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // use for the loading\n\n  const [httpError, setHttpError] = useState(); // use for the error\n\n  useEffect(() => {\n    const fetchMeals = async () => {\n      const response = await fetch('https://react-food-proj-default-rtdb.firebaseio.com/meals.json'); // if (response.ok) {\n      //   throw new Error('Something went wrong!');\n      // }\n\n      const responseData = await response.json();\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    };\n\n    fetchMeals().catch(error => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    s: true,\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvailableMeals, \"6pndJp/WWpMtmhSnoCH9k0tFnXc=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["E:/reactjs/food_proj/src/components/Meals/AvailableMeals.js"],"names":["useEffect","useState","Card","MealItem","classes","AvailableMeals","props","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMeals","response","fetch","responseData","json","loadedMeals","key","push","id","name","description","price","catch","error","message","MealsLoading","MealsError","mealsList","map","meal"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,OAAP,MAAoB,6BAApB;;;AAIA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C,CAFgC,CAEmB;;AACnD,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,EAA1C,CAHgC,CAGe;;AAE/CD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAG,YAAY;AAC/B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAD,CAA5B,CAD+B,CAG/B;AACA;AACA;;AAEA,YAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AAEA,YAAMC,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,GAAX,IAAkBH,YAAlB,EAAgC;AAC9BE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AACfC,UAAAA,EAAE,EAACF,GADY;AAEfG,UAAAA,IAAI,EAACN,YAAY,CAACG,GAAD,CAAZ,CAAkBG,IAFR;AAGfC,UAAAA,WAAW,EAACP,YAAY,CAACG,GAAD,CAAZ,CAAkBI,WAHf;AAIfC,UAAAA,KAAK,EAACR,YAAY,CAACG,GAAD,CAAZ,CAAkBK;AAJT,SAAjB;AAMD;;AACDhB,MAAAA,QAAQ,CAACU,WAAD,CAAR;AACAR,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KArBC;;AAuBFG,IAAAA,UAAU,GAAGY,KAAb,CAAoBC,KAAD,IAAW;AAC5BhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,YAAY,CAACc,KAAK,CAACC,OAAP,CAAZ;AACD,KAHD;AAKC,GA7BQ,EA6BN,EA7BM,CAAT;;AA+BA,MAAGlB,SAAH,EAAc;AACZ,wBACE;AAAS,MAAA,SAAS,EAAEL,OAAO,CAACwB,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAIjB,SAAJ,EAAe;AACb,wBACE;AAAS,MAAA,SAAS,EAAEP,OAAO,CAACyB,UAA5B;AAAA,6BACE;AAAA,kBAAIlB;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAEC,QAAMmB,SAAS,GAAGvB,KAAK,CAACwB,GAAN,CAAWC,IAAD,iBAC5B,QAAC,QAAD;AAAU,IAAA,CAAC,MAAX;AAEA,IAAA,EAAE,EAAEA,IAAI,CAACX,EAFT;AAGA,IAAA,IAAI,EAAEW,IAAI,CAACV,IAHX;AAIA,IAAA,WAAW,EAAEU,IAAI,CAACT,WAJlB;AAKA,IAAA,KAAK,EAAES,IAAI,CAACR;AALZ,KACKQ,IAAI,CAACX,EADV;AAAA;AAAA;AAAA;AAAA,UADkB,CAAlB;AAUA,sBACI;AAAS,IAAA,SAAS,EAAEjB,OAAO,CAACG,KAA5B;AAAA,2BACI,QAAC,IAAD;AAAA,6BACA;AAAA,kBACKuB;AADL;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASF,CAvEF;;GAAMzB,c;;KAAAA,c;AAyEN,eAAeA,cAAf","sourcesContent":["import {useEffect, useState} from 'react';\r\nimport Card from '../UI/Card';\r\nimport MealItem from './MealItem/MealItem';\r\nimport classes from './AvailableMeals.module.css';\r\n\r\n  \r\n\r\nconst AvailableMeals = (props) => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);  // use for the loading\r\n  const [httpError, setHttpError] = useState();  // use for the error\r\n\r\n  useEffect(() => {\r\n    const fetchMeals = async () => {\r\n    const response = await fetch('https://react-food-proj-default-rtdb.firebaseio.com/meals.json');\r\n\r\n    // if (response.ok) {\r\n    //   throw new Error('Something went wrong!');\r\n    // }\r\n\r\n    const responseData = await response.json();\r\n\r\n    const loadedMeals = [];\r\n\r\n    for (const key in responseData) {\r\n      loadedMeals.push({\r\n        id:key,\r\n        name:responseData[key].name,\r\n        description:responseData[key].description,\r\n        price:responseData[key].price,\r\n      });\r\n    }\r\n    setMeals(loadedMeals);\r\n    setIsLoading(false);\r\n  };\r\n  \r\n  fetchMeals().catch((error) => {\r\n    setIsLoading(false);\r\n    setHttpError(error.message);\r\n  });\r\n\r\n  }, []);\r\n\r\n  if(isLoading) {\r\n    return (\r\n      <section className={classes.MealsLoading}>\r\n        Loading....\r\n      </section>      \r\n    )\r\n  }\r\n\r\n  if (httpError) {\r\n    return (\r\n      <section className={classes.MealsError}>\r\n        <p>{httpError}</p>\r\n      </section>\r\n    )\r\n  }\r\n\r\n    const mealsList = meals.map((meal) => (\r\n    <MealItem s\r\n    key={meal.id} \r\n    id={meal.id}\r\n    name={meal.name} \r\n    description={meal.description} \r\n    price={meal.price}\r\n     />\r\n     ));\r\n\r\n    return (\r\n        <section className={classes.meals}>\r\n            <Card>\r\n            <ul>\r\n                {mealsList}\r\n            </ul>\r\n            </Card>\r\n        </section>\r\n    );\r\n };\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}